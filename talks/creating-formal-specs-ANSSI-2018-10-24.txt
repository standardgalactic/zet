© 2017 Arm Limited 
Engineering Formal 
Specifications of the Arm 
Processor Architecture
Alastair Reid 
Arm Research 
@alastair_d_reid

© 2017 Arm Limited 
?2
Engineering (Wikipedia)
Engineering is the creative application of science, 
mathematical methods, and empirical evidence
to the innovation, design, construction, operation and 
maintenance of structures, machines, materials, devices, 
systems, processes, and organizations
for the beneﬁt of humankind.

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
Apps
DataCenter
Fog
IoT Node
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
Apps
DataCenter
Fog
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Apps
DataCenter
Fog
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Apps
DataCenter
Fog
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
SGX Bomb 
MGX 
Apps
DataCenter
Fog
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
DataCenter
Fog
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
Qualcomm TZ
DataCenter
Fog
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
Qualcomm TZ
Heartbleed
DataCenter
Fog
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
Qualcomm TZ
Heartbleed
Trusting user data
DataCenter
Fog
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
Qualcomm TZ
Heartbleed
Trusting user data
DataCenter
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
Qualcomm TZ
Heartbleed
Trusting user data
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
Qualcomm TZ
Heartbleed
Trusting user data
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
Qualcomm TZ
Heartbleed
Trusting user data
!3

The IoT security problem
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Apps
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS + Network
Policies
MicroArchitecture
Architecture
Physical
Firmware
TEE
OS
Kubernetes
DPA
Rowhammer
CLKScrew
CLKScrew
Meltdown
Timing Side 
Channels
Spectre
Nintendo Switch
SGX Bomb 
MGX 
Apps
Qualcomm TZ
Heartbleed
Trusting user data
!3
BGP Poisoning
SSL Certiﬁcate 
Attack
DNS Spooﬁng

© 2017 Arm Limited 
?4
Reasoning about software and hardware
Programming
Reverse 
Engineering
Formal 
Verification
Simulation
Automatic 
Test 
Generation
Fuzz Testing
Exploit 
Detection
Bug 
Finding
Glitching
DPA

© 2017 Arm Limited 
?5
Current status of ARM specifications
- Formal specifications of A, R and M-class processor classes exist 
- Integrated into ARM's official processor specifications 
- Maintained by ARM's architecture team 
- Used by multiple teams within ARM 
- Formal validation of ARM processors using Bounded Model Checking 
- Development of test suites 
- Designing architecture extensions 
- ... 
- Publicly released in machine readable form

© 2017 Arm Limited 
?6
Overview
1. Reasoning about programs 
2. ARM's formal processor specifications 
• Three experiences 
• Lessons learned 
• (Work in progress) 
3. Conclusions
"Trustworthy Specifications of the ARM v8-A and v8-M architecture," FMCAD 2016 
"End to End Verification of ARM processors with ISA Formal," CAV 2016 
"Who guards the guards?  Formal Validation of ARM v8-M Specifications," OOPSLA 2017 
https://alastairreid.github.io/papers/

© 2017 Arm Limited 
Creating trustworthy 
specifications
"Trustworthy Specifications of the ARM v8-A and v8-M architecture," FMCAD 2016

© 2017 Arm Limited 
?8
Unstructured English Prose (A-class spec)

© 2017 Arm Limited 
?9
Semi-structured English prose (M-class spec)

© 2017 Arm Limited 
?10
Tables - semistructured, not machine readable

© 2017 Arm Limited 
?11
Registers - structured, machine-readable

© 2017 Arm Limited 
?12
Pseudocode

© 2017 Arm Limited 
?12
Pseudocode
Type Inference
Dependent Types
Enumerations
Unbounded Integers
Bit Vectors
Indentation-based Syntax
Imperative
Exceptions

© 2017 Arm Limited 
?13
Status at the start
- No tools (parser, type checker) 
- Incomplete (around 15% missing) 
- "Specify by comment" 
- Many trivial errors (that confuse tools but not humans) 
- Unexecuted, untested 
- Senior architects believed that an executable spec was 
- Impossible 
- Not useful 
- Less readable 
- Less correct

© 2017 Arm Limited 
?14
Architectural Conformance Suite
Processor architectural compliance sign-off 
Large 
• v8-A 32,000 test programs, billions of instructions 
• v8-M 3,500 test programs, > 250 million instructions 
Thorough 
• Tests dark corners of specification

© 2017 Arm Limited 
?15
© 2017 Arm Limited 
Progress in testing Arm specification
-
Does not parse, does not typecheck
-
Can't get out of reset
-
Can't execute first instruction
-
Can't execute first 100 instructions
-
...
-
Passes 90% of tests
-
Passes 99% of tests
-
...
0
50
100

© 2017 Arm Limited 
?16
Measuring architecture coverage of tests
Untested: op1*op2 == -3.0, FPCR.RND=-Inf 

© 2017 Arm Limited 
?17
Creating a Virtuous Cycle
ARM 
Spec

© 2017 Arm Limited 
?18
Lessons learned about engineering a specification
Specifications contain bugs 
Huge value in being able to run existing test suites 
- Need to balance against benefits of non-executable specs 
Find ways to provide direct benefit to other users of spec 
- They will do some of the testing/debugging for you 
- They will support getting your changes/spec adopted as master spec 
- Creates Virtuous Cycle

© 2017 Arm Limited 
Formal validation 
of processors 
and of specifications
"End to End Verification of ARM processors with ISA Formal," CAV 2016
"Who guards the guards?  Formal Validation of ARM v8-M Specifications" OOPSLA 2017

© 2017 Arm Limited 
?20
Checking an instrucjon
ADD

© 2017 Arm Limited 
?20
Checking an instrucjon
ADD
CMP LDR
STR BNE
Context

© 2017 Arm Limited 
?21
Formal framework (deterministic specs)
Implementation
Specification
Stimulus
? == ?
Bounded model checker

© 2017 Arm Limited 
?22
Arm CPUs verified with ISA-Formal
A-class 
Cortex-A53 
Cortex-A32 
Cortex-A35 
Cortex-A55 
Next generation
R-class 
Cortex-R52 
Next generation
M-class 
Cortex-M4 
Cortex-M7 
Cortex-M33 
Next generation
Cambridge Projects
Rolling out globally to other design centres 
Sophia, France - Cortex-A75 (partial) 
Austin, USA - TBA 
Chandler, USA - TBA

© 2017 Arm Limited 
?23
Lessons Learned from validating processors
Very effective way to find bugs in implementations 
Formally validating implementation is effective at finding bugs in spec 
- Try to find most of the bugs in your spec before you start 
Huge value in being able to use spec to validate implementations 
- Helps get formal specification adopted as part of official spec 

© 2017 Arm Limited 
Formal validation 
of specifications
"Who guards the guards?  Formal Validation of ARM v8-M Specifications" OOPSLA 2017

© 2017 Arm Limited 
?25
One Specification to rule them all?
Architecture Spec
Compliance Tests
Processors
Reference Simulator

© 2017 Arm Limited 
?26
Rule JRJC 
Exit from lockup is by any of the following: 
• A Cold reset. 
• A Warm reset. 
• Entry to Debug state. 
• Preemption by a higher priority processor exception.

© 2017 Arm Limited 
?26
Rule JRJC 
Exit from lockup is by any of the following: 
• A Cold reset. 
• A Warm reset. 
• Entry to Debug state. 
• Preemption by a higher priority processor exception.
State Change X    
Event A             
Event B               
State Change C                
Event D                                                                                            
R         

© 2017 Arm Limited 
?26
Rule JRJC 
Exit from lockup is by any of the following: 
• A Cold reset. 
• A Warm reset. 
• Entry to Debug state. 
• Preemption by a higher priority processor exception.
State Change X    
Event A             
Event B               
State Change C                
Event D                                                                                            
R         
Rule R:    X → A ∨ B ∨ C ∨ D

© 2017 Arm Limited 
?27
State Change
Exit from lockup
Fell(LockedUp)
Event
A Cold reset
Called(TakeColdReset)
Event
A Warm reset
Called(TakeReset)
State Change
Entry to Debug state
Rose(Halted)
Event
Preemption by a higher 
priority processor 
exception
Called(ExceptionEntry)

© 2017 Arm Limited 
?28
"Eyeball Closeness"
Rule JRJC 
Exit from lockup is by any of the following: 
• A Cold reset. 
• A Warm reset. 
• Entry to Debug state. 
• Preemption by a higher priority processor exception.
Fell(LockedUp) → Called(TakeColdReset) 
                            ∨ Called(TakeReset) 
                            ∨ Rose(Halted) 
                            ∨ Called(ExceptionEntry)

© 2017 Arm Limited 
?29
Rule VGNW 
Entry to lockup from an exception causes 
• Any Fault Status Registers associated with the exception 
to be updated. 
• No update to the exception state, pending or active. 
• The PC to be set to 0xEFFFFFFE. 
• EPSR.IT to become UNKNOWN. 
In addition, HFSR.FORCED is not set to 1.
Out of date
Misleading
Ambiguous
Untestable

© 2017 Arm Limited 
?30
Counterexample
v8-M Spec
Rules
Convert
Z3 
SMT 
Solver
+
~10,000 lines
~1,000,000 lines

© 2017 Arm Limited 
?31
Lessons Learned from validating specifications
Redundancy essential for detecting errors 
- Detected subtle bugs in security, exceptions, debug, ... 
- Found bugs in English prose 
Need set of 'orthogonal' properties 
- Invariants, Security properties, Reachability properties, etc. 
Eyeball closeness 
Needed to translate specification to another language to let us use other tools

© 2017 Arm Limited 
Work in progress: 
Security of architecture 
specifications

© 2017 Arm Limited 
?33
Validating security of processor architectures
Scope 
- Compositional Attacks 
- Hardware-based Security Enforcement 
- Confidentiality, Integrity, Availability (and more?) 
Challenges 
- Cyclic dependencies between HSEs 
- Microarchitectural storage/timing channels

© 2017 Arm Limited 
?34
ARM Specification
ARM Processor
Translate 
to Verilog
Verilog 
Model 
Checker
v8-M Spec
Properties
Z3 
SMT 
Solver
+
Translate 
to SMT

© 2017 Arm Limited 
?35
Engineering Formal Specifications of Real World Artifacts
Spec
Plan for adoption into official specs 
Apply standard engineering practices 
- Test, review, CI, ... 
- Understand approximations and limitations 
Build a virtuous cycle 
- Look for early adopters 
- What is "killer app" of your spec? 
- Ensure specifications have many uses 
   (Don't write spec in Coq / HOL / ACL2 / ...) 

© 2017 Arm Limited 
?36
Public release of machine readable Arm specification
Enable formal veriﬁcajon of sotware and tools 
Releases: v8.2 (4/2017), v8.3 (10/2017), v8.4 (6/2018), v8.5 (9/2018) 
Working with Cambridge University REMS group to convert to SAIL 
Backends for HOL, OCaml, Memory model, (hopefully Coq too) 
Speciﬁcajon: hups://developer.arm.com/products/architecture/a-proﬁle/
explorajon-tools 
Tools: hups://github.com/alastairreid/mra_tools 
(See also: hups://github.com/herd/herdtools7/blob/master/herd/libdir/aarch64.cat) 
Talk to me about how I can help you use it

Thank You! 
Danke! 
Merci! 
谢谢! 
ありがとう! 
Gracias! 
Kiitos!
© 2017 Arm Limited 
?37
@alastair_d_reid
"Trustworthy Specifications of the ARM v8-A and v8-M architecture," FMCAD 2016
"Who guards the guards?  Formal Validation of ARM v8-M Specifications," OOPSLA 2017
"End to End Verification of ARM processors with ISA Formal," CAV 2016

alastair.reid@arm.com @alastair_d_reid
W38
ADD
Idle
CMP
BNE
LDR
STR
Formal veriﬁcation is breadth ﬁrst

alastair.reid@arm.com @alastair_d_reid
W38
ADD
Idle
CMP
BNE
LDR
STR
Formal veriﬁcation is breadth ﬁrst

alastair.reid@arm.com @alastair_d_reid
W38
ADD
Idle
CMP
BNE
LDR
STR
Formal veriﬁcation is breadth ﬁrst

alastair.reid@arm.com @alastair_d_reid
W38
ADD
Idle
CMP
BNE
LDR
STR
Formal veriﬁcation is breadth ﬁrst

alastair.reid@arm.com @alastair_d_reid
W38
ADD
Idle
CMP
BNE
LDR
STR
Formal veriﬁcation is breadth ﬁrst

alastair.reid@arm.com @alastair_d_reid
W38
ADD
Idle
CMP
BNE
LDR
STR
Formal veriﬁcation is breadth ﬁrst

alastair.reid@arm.com @alastair_d_reid
Idle
Testing is depth-ﬁrst

alastair.reid@arm.com @alastair_d_reid
Idle
Testing is depth-ﬁrst

alastair.reid@arm.com @alastair_d_reid
Idle
Testing is depth-ﬁrst

alastair.reid@arm.com @alastair_d_reid
Idle
Testing is depth-ﬁrst

alastair.reid@arm.com @alastair_d_reid
Idle
Testing is depth-ﬁrst

alastair.reid@arm.com @alastair_d_reid
Idle
Testing is depth-ﬁrst

alastair.reid@arm.com @alastair_d_reid
Idle
Testing is depth-ﬁrst

alastair.reid@arm.com @alastair_d_reid
Idle
Testing is depth-ﬁrst

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

alastair.reid@arm.com @alastair_d_reid
Mixed Mode Veriﬁcation
Idle
ADD
Idle
CMP
BNE
LDR
STR

© 2017 Arm Limited 
The Arm trademarks featured in this 
presentation are registered trademarks or 
trademarks of Arm Limited (or its subsidiaries) 
in the US and/or elsewhere.  All rights 
reserved.  All other marks featured may be 
trademarks of their respective owners. 
 
www.arm.com/company/policies/trademarks
?41

